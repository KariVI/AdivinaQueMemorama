//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdivinaQue.Client.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/AdivinaQue.Host.InterfaceContract")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.IService", CallbackContract=typeof(AdivinaQue.Client.Proxy.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/join", ReplyAction="http://tempuri.org/IService/joinResponse")]
        bool join(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/join", ReplyAction="http://tempuri.org/IService/joinResponse")]
        System.Threading.Tasks.Task<bool> joinAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/sendMessage")]
        void sendMessage(string message, string username, string userReceptor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/sendMessage")]
        System.Threading.Tasks.Task sendMessageAsync(string message, string username, string userReceptor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/getConnectedUsers")]
        void getConnectedUsers();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/getConnectedUsers")]
        System.Threading.Tasks.Task getConnectedUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/disconnectUser")]
        void disconnectUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/disconnectUser")]
        System.Threading.Tasks.Task disconnectUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/register")]
        void register(string username, string password, string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/register")]
        System.Threading.Tasks.Task registerAsync(string username, string password, string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/searchUsername", ReplyAction="http://tempuri.org/IService/searchUsernameResponse")]
        bool searchUsername(string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/searchUsername", ReplyAction="http://tempuri.org/IService/searchUsernameResponse")]
        System.Threading.Tasks.Task<bool> searchUsernameAsync(string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/searchInfoPlayerByUsername")]
        void searchInfoPlayerByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/searchInfoPlayerByUsername")]
        System.Threading.Tasks.Task searchInfoPlayerByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/sendMail", ReplyAction="http://tempuri.org/IService/sendMailResponse")]
        string sendMail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/sendMail", ReplyAction="http://tempuri.org/IService/sendMailResponse")]
        System.Threading.Tasks.Task<string> sendMailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/modify")]
        void modify(AdivinaQue.Client.Proxy.Player player, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/modify")]
        System.Threading.Tasks.Task modifyAsync(AdivinaQue.Client.Proxy.Player player, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/delete")]
        void delete(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/delete")]
        System.Threading.Tasks.Task deleteAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RecieveMessage")]
        void RecieveMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RecieveUsers")]
        void RecieveUsers(System.Collections.Generic.Dictionary<string, object> users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RecievePlayer")]
        void RecievePlayer(AdivinaQue.Client.Proxy.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : AdivinaQue.Client.Proxy.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<AdivinaQue.Client.Proxy.IService>, AdivinaQue.Client.Proxy.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool join(string username, string password) {
            return base.Channel.join(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> joinAsync(string username, string password) {
            return base.Channel.joinAsync(username, password);
        }
        
        public void sendMessage(string message, string username, string userReceptor) {
            base.Channel.sendMessage(message, username, userReceptor);
        }
        
        public System.Threading.Tasks.Task sendMessageAsync(string message, string username, string userReceptor) {
            return base.Channel.sendMessageAsync(message, username, userReceptor);
        }
        
        public void getConnectedUsers() {
            base.Channel.getConnectedUsers();
        }
        
        public System.Threading.Tasks.Task getConnectedUsersAsync() {
            return base.Channel.getConnectedUsersAsync();
        }
        
        public void disconnectUser(string username) {
            base.Channel.disconnectUser(username);
        }
        
        public System.Threading.Tasks.Task disconnectUserAsync(string username) {
            return base.Channel.disconnectUserAsync(username);
        }
        
        public void register(string username, string password, string name, string email) {
            base.Channel.register(username, password, name, email);
        }
        
        public System.Threading.Tasks.Task registerAsync(string username, string password, string name, string email) {
            return base.Channel.registerAsync(username, password, name, email);
        }
        
        public bool searchUsername(string newUsername) {
            return base.Channel.searchUsername(newUsername);
        }
        
        public System.Threading.Tasks.Task<bool> searchUsernameAsync(string newUsername) {
            return base.Channel.searchUsernameAsync(newUsername);
        }
        
        public void searchInfoPlayerByUsername(string username) {
            base.Channel.searchInfoPlayerByUsername(username);
        }
        
        public System.Threading.Tasks.Task searchInfoPlayerByUsernameAsync(string username) {
            return base.Channel.searchInfoPlayerByUsernameAsync(username);
        }
        
        public string sendMail(string email) {
            return base.Channel.sendMail(email);
        }
        
        public System.Threading.Tasks.Task<string> sendMailAsync(string email) {
            return base.Channel.sendMailAsync(email);
        }
        
        public void modify(AdivinaQue.Client.Proxy.Player player, string username) {
            base.Channel.modify(player, username);
        }
        
        public System.Threading.Tasks.Task modifyAsync(AdivinaQue.Client.Proxy.Player player, string username) {
            return base.Channel.modifyAsync(player, username);
        }
        
        public void delete(string username) {
            base.Channel.delete(username);
        }
        
        public System.Threading.Tasks.Task deleteAsync(string username) {
            return base.Channel.deleteAsync(username);
        }
    }
}
