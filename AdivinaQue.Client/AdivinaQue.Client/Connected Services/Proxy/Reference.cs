//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdivinaQue.Client.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/AdivinaQue.Host.InterfaceContract")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.IService", CallbackContract=typeof(AdivinaQue.Client.Proxy.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Join", ReplyAction="http://tempuri.org/IService/JoinResponse")]
        bool Join(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Join", ReplyAction="http://tempuri.org/IService/JoinResponse")]
        System.Threading.Tasks.Task<bool> JoinAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendMessage")]
        void SendMessage(string message, string username, string userReceptor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string username, string userReceptor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetConnectedUsers")]
        void GetConnectedUsers();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetConnectedUsers")]
        System.Threading.Tasks.Task GetConnectedUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/DisconnectUser")]
        void DisconnectUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/DisconnectUser")]
        System.Threading.Tasks.Task DisconnectUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        bool Register(AdivinaQue.Client.Proxy.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(AdivinaQue.Client.Proxy.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchUsername", ReplyAction="http://tempuri.org/IService/SearchUsernameResponse")]
        bool SearchUsername(string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchUsername", ReplyAction="http://tempuri.org/IService/SearchUsernameResponse")]
        System.Threading.Tasks.Task<bool> SearchUsernameAsync(string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SearchInfoPlayerByUsername")]
        void SearchInfoPlayerByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SearchInfoPlayerByUsername")]
        System.Threading.Tasks.Task SearchInfoPlayerByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMailValidation", ReplyAction="http://tempuri.org/IService/SendMailValidationResponse")]
        string SendMailValidation(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMailValidation", ReplyAction="http://tempuri.org/IService/SendMailValidationResponse")]
        System.Threading.Tasks.Task<string> SendMailValidationAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Modify")]
        void Modify(AdivinaQue.Client.Proxy.Player player, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Modify")]
        System.Threading.Tasks.Task ModifyAsync(AdivinaQue.Client.Proxy.Player player, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Delete")]
        void Delete(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Delete")]
        System.Threading.Tasks.Task DeleteAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendMailInvitation")]
        void SendMailInvitation(string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendMailInvitation")]
        System.Threading.Tasks.Task SendMailInvitationAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendInvitation", ReplyAction="http://tempuri.org/IService/SendInvitationResponse")]
        bool SendInvitation(string toUsername, string fromUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendInvitation", ReplyAction="http://tempuri.org/IService/SendInvitationResponse")]
        System.Threading.Tasks.Task<bool> SendInvitationAsync(string toUsername, string fromUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMail", ReplyAction="http://tempuri.org/IService/SendMailResponse")]
        string SendMail(string to, string asunto, string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMail", ReplyAction="http://tempuri.org/IService/SendMailResponse")]
        System.Threading.Tasks.Task<string> SendMailAsync(string to, string asunto, string body);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetScores")]
        void GetScores(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetScores")]
        System.Threading.Tasks.Task GetScoresAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RecieveMessage")]
        void RecieveMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RecieveUsers")]
        void RecieveUsers(System.Collections.Generic.Dictionary<string, object> users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RecievePlayer")]
        void RecievePlayer(AdivinaQue.Client.Proxy.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendInvitationGame", ReplyAction="http://tempuri.org/IService/SendInvitationGameResponse")]
        bool SendInvitationGame(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RecieveScores")]
        void RecieveScores(System.Collections.Generic.Dictionary<string, int> globalScores);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : AdivinaQue.Client.Proxy.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<AdivinaQue.Client.Proxy.IService>, AdivinaQue.Client.Proxy.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Join(string username, string password) {
            return base.Channel.Join(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> JoinAsync(string username, string password) {
            return base.Channel.JoinAsync(username, password);
        }
        
        public void SendMessage(string message, string username, string userReceptor) {
            base.Channel.SendMessage(message, username, userReceptor);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string username, string userReceptor) {
            return base.Channel.SendMessageAsync(message, username, userReceptor);
        }
        
        public void GetConnectedUsers() {
            base.Channel.GetConnectedUsers();
        }
        
        public System.Threading.Tasks.Task GetConnectedUsersAsync() {
            return base.Channel.GetConnectedUsersAsync();
        }
        
        public void DisconnectUser(string username) {
            base.Channel.DisconnectUser(username);
        }
        
        public System.Threading.Tasks.Task DisconnectUserAsync(string username) {
            return base.Channel.DisconnectUserAsync(username);
        }
        
        public bool Register(AdivinaQue.Client.Proxy.Player player) {
            return base.Channel.Register(player);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(AdivinaQue.Client.Proxy.Player player) {
            return base.Channel.RegisterAsync(player);
        }
        
        public bool SearchUsername(string newUsername) {
            return base.Channel.SearchUsername(newUsername);
        }
        
        public System.Threading.Tasks.Task<bool> SearchUsernameAsync(string newUsername) {
            return base.Channel.SearchUsernameAsync(newUsername);
        }
        
        public void SearchInfoPlayerByUsername(string username) {
            base.Channel.SearchInfoPlayerByUsername(username);
        }
        
        public System.Threading.Tasks.Task SearchInfoPlayerByUsernameAsync(string username) {
            return base.Channel.SearchInfoPlayerByUsernameAsync(username);
        }
        
        public string SendMailValidation(string email) {
            return base.Channel.SendMailValidation(email);
        }
        
        public System.Threading.Tasks.Task<string> SendMailValidationAsync(string email) {
            return base.Channel.SendMailValidationAsync(email);
        }
        
        public void Modify(AdivinaQue.Client.Proxy.Player player, string username) {
            base.Channel.Modify(player, username);
        }
        
        public System.Threading.Tasks.Task ModifyAsync(AdivinaQue.Client.Proxy.Player player, string username) {
            return base.Channel.ModifyAsync(player, username);
        }
        
        public void Delete(string username) {
            base.Channel.Delete(username);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string username) {
            return base.Channel.DeleteAsync(username);
        }
        
        public void SendMailInvitation(string email) {
            base.Channel.SendMailInvitation(email);
        }
        
        public System.Threading.Tasks.Task SendMailInvitationAsync(string email) {
            return base.Channel.SendMailInvitationAsync(email);
        }
        
        public bool SendInvitation(string toUsername, string fromUsername) {
            return base.Channel.SendInvitation(toUsername, fromUsername);
        }
        
        public System.Threading.Tasks.Task<bool> SendInvitationAsync(string toUsername, string fromUsername) {
            return base.Channel.SendInvitationAsync(toUsername, fromUsername);
        }
        
        public string SendMail(string to, string asunto, string body) {
            return base.Channel.SendMail(to, asunto, body);
        }
        
        public System.Threading.Tasks.Task<string> SendMailAsync(string to, string asunto, string body) {
            return base.Channel.SendMailAsync(to, asunto, body);
        }
        
        public void GetScores(string username) {
            base.Channel.GetScores(username);
        }
        
        public System.Threading.Tasks.Task GetScoresAsync(string username) {
            return base.Channel.GetScoresAsync(username);
        }
    }
}
