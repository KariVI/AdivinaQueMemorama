//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdivinaQue.Client.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/AdivinaQue.Host.InterfaceContract")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameCurrently", Namespace="http://schemas.datacontract.org/2004/07/AdivinaQue.Host.InterfaceContract")]
    [System.SerializableAttribute()]
    public partial class GameCurrently : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, int> PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreWinnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TopicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, int> Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScoreWinner {
            get {
                return this.ScoreWinnerField;
            }
            set {
                if ((this.ScoreWinnerField.Equals(value) != true)) {
                    this.ScoreWinnerField = value;
                    this.RaisePropertyChanged("ScoreWinner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Topic {
            get {
                return this.TopicField;
            }
            set {
                if ((object.ReferenceEquals(this.TopicField, value) != true)) {
                    this.TopicField = value;
                    this.RaisePropertyChanged("Topic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerField, value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.IPlayerMgt", CallbackContract=typeof(AdivinaQue.Client.Proxy.IPlayerMgtCallback))]
    public interface IPlayerMgt {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Join", ReplyAction="http://tempuri.org/IPlayerMgt/JoinResponse")]
        bool Join(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Join", ReplyAction="http://tempuri.org/IPlayerMgt/JoinResponse")]
        System.Threading.Tasks.Task<bool> JoinAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/SendMessage")]
        void SendMessage(string message, string username, string userReceptor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string username, string userReceptor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/GetConnectedUsers")]
        void GetConnectedUsers();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/GetConnectedUsers")]
        System.Threading.Tasks.Task GetConnectedUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/DisconnectUser")]
        void DisconnectUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/DisconnectUser")]
        System.Threading.Tasks.Task DisconnectUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Register", ReplyAction="http://tempuri.org/IPlayerMgt/RegisterResponse")]
        bool Register(AdivinaQue.Client.Proxy.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Register", ReplyAction="http://tempuri.org/IPlayerMgt/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(AdivinaQue.Client.Proxy.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/SearchUsername", ReplyAction="http://tempuri.org/IPlayerMgt/SearchUsernameResponse")]
        bool SearchUsername(string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/SearchUsername", ReplyAction="http://tempuri.org/IPlayerMgt/SearchUsernameResponse")]
        System.Threading.Tasks.Task<bool> SearchUsernameAsync(string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/FindUsername", ReplyAction="http://tempuri.org/IPlayerMgt/FindUsernameResponse")]
        bool FindUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/FindUsername", ReplyAction="http://tempuri.org/IPlayerMgt/FindUsernameResponse")]
        System.Threading.Tasks.Task<bool> FindUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/SearchInfoPlayerByUsername")]
        void SearchInfoPlayerByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/SearchInfoPlayerByUsername")]
        System.Threading.Tasks.Task SearchInfoPlayerByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GenerateCode", ReplyAction="http://tempuri.org/IPlayerMgt/GenerateCodeResponse")]
        string GenerateCode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GenerateCode", ReplyAction="http://tempuri.org/IPlayerMgt/GenerateCodeResponse")]
        System.Threading.Tasks.Task<string> GenerateCodeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Modify", ReplyAction="http://tempuri.org/IPlayerMgt/ModifyResponse")]
        bool Modify(AdivinaQue.Client.Proxy.Player player, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Modify", ReplyAction="http://tempuri.org/IPlayerMgt/ModifyResponse")]
        System.Threading.Tasks.Task<bool> ModifyAsync(AdivinaQue.Client.Proxy.Player player, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Delete", ReplyAction="http://tempuri.org/IPlayerMgt/DeleteResponse")]
        bool Delete(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/Delete", ReplyAction="http://tempuri.org/IPlayerMgt/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/SendInvitation", ReplyAction="http://tempuri.org/IPlayerMgt/SendInvitationResponse")]
        bool SendInvitation(string toUsername, string fromUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/SendInvitation", ReplyAction="http://tempuri.org/IPlayerMgt/SendInvitationResponse")]
        System.Threading.Tasks.Task<bool> SendInvitationAsync(string toUsername, string fromUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/SendMail", ReplyAction="http://tempuri.org/IPlayerMgt/SendMailResponse")]
        string SendMail(string to, string asunto, string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/SendMail", ReplyAction="http://tempuri.org/IPlayerMgt/SendMailResponse")]
        System.Threading.Tasks.Task<string> SendMailAsync(string to, string asunto, string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetEmails", ReplyAction="http://tempuri.org/IPlayerMgt/GetEmailsResponse")]
        string[] GetEmails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetEmails", ReplyAction="http://tempuri.org/IPlayerMgt/GetEmailsResponse")]
        System.Threading.Tasks.Task<string[]> GetEmailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetEmailByUser", ReplyAction="http://tempuri.org/IPlayerMgt/GetEmailByUserResponse")]
        string GetEmailByUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetEmailByUser", ReplyAction="http://tempuri.org/IPlayerMgt/GetEmailByUserResponse")]
        System.Threading.Tasks.Task<string> GetEmailByUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/ChangePassword", ReplyAction="http://tempuri.org/IPlayerMgt/ChangePasswordResponse")]
        bool ChangePassword(string username, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/ChangePassword", ReplyAction="http://tempuri.org/IPlayerMgt/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetUsers", ReplyAction="http://tempuri.org/IPlayerMgt/GetUsersResponse")]
        string[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetUsers", ReplyAction="http://tempuri.org/IPlayerMgt/GetUsersResponse")]
        System.Threading.Tasks.Task<string[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetUsersConnected", ReplyAction="http://tempuri.org/IPlayerMgt/GetUsersConnectedResponse")]
        string[] GetUsersConnected();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/GetUsersConnected", ReplyAction="http://tempuri.org/IPlayerMgt/GetUsersConnectedResponse")]
        System.Threading.Tasks.Task<string[]> GetUsersConnectedAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/GetScores")]
        void GetScores(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/GetScores")]
        System.Threading.Tasks.Task GetScoresAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/GetCurrentlyUserPlayed")]
        void GetCurrentlyUserPlayed();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/GetCurrentlyUserPlayed")]
        System.Threading.Tasks.Task GetCurrentlyUserPlayedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerMgtCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/RecieveMessage")]
        void RecieveMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/RecieveUsers")]
        void RecieveUsers(System.Collections.Generic.Dictionary<string, object> users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/RecievePlayer")]
        void RecievePlayer(AdivinaQue.Client.Proxy.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerMgt/SendInvitationGame", ReplyAction="http://tempuri.org/IPlayerMgt/SendInvitationGameResponse")]
        bool SendInvitationGame(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/SendBoardConfigurate")]
        void SendBoardConfigurate(string username, int size, string category);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveRival")]
        void ReceiveRival(string rival);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/RecieveScores")]
        void RecieveScores(System.Collections.Generic.Dictionary<string, int> globalScores);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveCardSeed")]
        void ReceiveCardSeed(int[] randomImageList, int[] randomPositionList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveCorrectPair")]
        void ReceiveCorrectPair(System.Collections.Generic.Dictionary<System.Windows.Media.Imaging.BitmapImage, string> cards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveCardTurn")]
        void ReceiveCardTurn(System.Windows.Media.Imaging.BitmapImage image, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveScoreRival")]
        void ReceiveScoreRival(int score);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveNextTurn")]
        void ReceiveNextTurn(bool nextTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveNumberCardsFinded")]
        void ReceiveNumberCardsFinded(int numberCardsFinded);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveWinner")]
        void ReceiveWinner(string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerMgt/ReceiveUsersPlayed")]
        void ReceiveUsersPlayed(string[] usersPlayed);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerMgtChannel : AdivinaQue.Client.Proxy.IPlayerMgt, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerMgtClient : System.ServiceModel.DuplexClientBase<AdivinaQue.Client.Proxy.IPlayerMgt>, AdivinaQue.Client.Proxy.IPlayerMgt {
        
        public PlayerMgtClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerMgtClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerMgtClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerMgtClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerMgtClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Join(string username, string password) {
            return base.Channel.Join(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> JoinAsync(string username, string password) {
            return base.Channel.JoinAsync(username, password);
        }
        
        public void SendMessage(string message, string username, string userReceptor) {
            base.Channel.SendMessage(message, username, userReceptor);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string username, string userReceptor) {
            return base.Channel.SendMessageAsync(message, username, userReceptor);
        }
        
        public void GetConnectedUsers() {
            base.Channel.GetConnectedUsers();
        }
        
        public System.Threading.Tasks.Task GetConnectedUsersAsync() {
            return base.Channel.GetConnectedUsersAsync();
        }
        
        public void DisconnectUser(string username) {
            base.Channel.DisconnectUser(username);
        }
        
        public System.Threading.Tasks.Task DisconnectUserAsync(string username) {
            return base.Channel.DisconnectUserAsync(username);
        }
        
        public bool Register(AdivinaQue.Client.Proxy.Player player) {
            return base.Channel.Register(player);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(AdivinaQue.Client.Proxy.Player player) {
            return base.Channel.RegisterAsync(player);
        }
        
        public bool SearchUsername(string newUsername) {
            return base.Channel.SearchUsername(newUsername);
        }
        
        public System.Threading.Tasks.Task<bool> SearchUsernameAsync(string newUsername) {
            return base.Channel.SearchUsernameAsync(newUsername);
        }
        
        public bool FindUsername(string username) {
            return base.Channel.FindUsername(username);
        }
        
        public System.Threading.Tasks.Task<bool> FindUsernameAsync(string username) {
            return base.Channel.FindUsernameAsync(username);
        }
        
        public void SearchInfoPlayerByUsername(string username) {
            base.Channel.SearchInfoPlayerByUsername(username);
        }
        
        public System.Threading.Tasks.Task SearchInfoPlayerByUsernameAsync(string username) {
            return base.Channel.SearchInfoPlayerByUsernameAsync(username);
        }
        
        public string GenerateCode() {
            return base.Channel.GenerateCode();
        }
        
        public System.Threading.Tasks.Task<string> GenerateCodeAsync() {
            return base.Channel.GenerateCodeAsync();
        }
        
        public bool Modify(AdivinaQue.Client.Proxy.Player player, string username) {
            return base.Channel.Modify(player, username);
        }
        
        public System.Threading.Tasks.Task<bool> ModifyAsync(AdivinaQue.Client.Proxy.Player player, string username) {
            return base.Channel.ModifyAsync(player, username);
        }
        
        public bool Delete(string username) {
            return base.Channel.Delete(username);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string username) {
            return base.Channel.DeleteAsync(username);
        }
        
        public bool SendInvitation(string toUsername, string fromUsername) {
            return base.Channel.SendInvitation(toUsername, fromUsername);
        }
        
        public System.Threading.Tasks.Task<bool> SendInvitationAsync(string toUsername, string fromUsername) {
            return base.Channel.SendInvitationAsync(toUsername, fromUsername);
        }
        
        public string SendMail(string to, string asunto, string body) {
            return base.Channel.SendMail(to, asunto, body);
        }
        
        public System.Threading.Tasks.Task<string> SendMailAsync(string to, string asunto, string body) {
            return base.Channel.SendMailAsync(to, asunto, body);
        }
        
        public string[] GetEmails() {
            return base.Channel.GetEmails();
        }
        
        public System.Threading.Tasks.Task<string[]> GetEmailsAsync() {
            return base.Channel.GetEmailsAsync();
        }
        
        public string GetEmailByUser(string username) {
            return base.Channel.GetEmailByUser(username);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailByUserAsync(string username) {
            return base.Channel.GetEmailByUserAsync(username);
        }
        
        public bool ChangePassword(string username, string newPassword) {
            return base.Channel.ChangePassword(username, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string newPassword) {
            return base.Channel.ChangePasswordAsync(username, newPassword);
        }
        
        public string[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<string[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public string[] GetUsersConnected() {
            return base.Channel.GetUsersConnected();
        }
        
        public System.Threading.Tasks.Task<string[]> GetUsersConnectedAsync() {
            return base.Channel.GetUsersConnectedAsync();
        }
        
        public void GetScores(string username) {
            base.Channel.GetScores(username);
        }
        
        public System.Threading.Tasks.Task GetScoresAsync(string username) {
            return base.Channel.GetScoresAsync(username);
        }
        
        public void GetCurrentlyUserPlayed() {
            base.Channel.GetCurrentlyUserPlayed();
        }
        
        public System.Threading.Tasks.Task GetCurrentlyUserPlayedAsync() {
            return base.Channel.GetCurrentlyUserPlayedAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.IGameMgt", CallbackContract=typeof(AdivinaQue.Client.Proxy.IGameMgtCallback))]
    public interface IGameMgt {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendBoard")]
        void SendBoard(string toUsername, int size, string category);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendBoard")]
        System.Threading.Tasks.Task SendBoardAsync(string toUsername, int size, string category);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendRival")]
        void SendRival(string rival, string fromUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendRival")]
        System.Threading.Tasks.Task SendRivalAsync(string rival, string fromUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendBoardLists")]
        void SendBoardLists(string toUsername, int[] randomImageList, int[] randomPositionList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendBoardLists")]
        System.Threading.Tasks.Task SendBoardListsAsync(string toUsername, int[] randomImageList, int[] randomPositionList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendCorrectCards")]
        void SendCorrectCards(string toUsername, System.Collections.Generic.Dictionary<System.Windows.Media.Imaging.BitmapImage, string> cards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendCorrectCards")]
        System.Threading.Tasks.Task SendCorrectCardsAsync(string toUsername, System.Collections.Generic.Dictionary<System.Windows.Media.Imaging.BitmapImage, string> cards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendCardTurn")]
        void SendCardTurn(string toUsername, System.Windows.Media.Imaging.BitmapImage image, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendCardTurn")]
        System.Threading.Tasks.Task SendCardTurnAsync(string toUsername, System.Windows.Media.Imaging.BitmapImage image, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendScoreRival")]
        void SendScoreRival(string toUsername, int score);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendScoreRival")]
        System.Threading.Tasks.Task SendScoreRivalAsync(string toUsername, int score);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendNextTurnRival")]
        void SendNextTurnRival(string toUsername, bool nextTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendNextTurnRival")]
        System.Threading.Tasks.Task SendNextTurnRivalAsync(string toUsername, bool nextTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendNumberCardsFinded")]
        void SendNumberCardsFinded(string toUsername, int numberCardsFinded);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendNumberCardsFinded")]
        System.Threading.Tasks.Task SendNumberCardsFindedAsync(string toUsername, int numberCardsFinded);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendWinner")]
        void SendWinner(string toUsername, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendWinner")]
        System.Threading.Tasks.Task SendWinnerAsync(string toUsername, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/DisconnectPlayers")]
        void DisconnectPlayers(string username, string rival);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/DisconnectPlayers")]
        System.Threading.Tasks.Task DisconnectPlayersAsync(string username, string rival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameMgt/SendGame", ReplyAction="http://tempuri.org/IGameMgt/SendGameResponse")]
        bool SendGame(AdivinaQue.Client.Proxy.GameCurrently gameCurrently);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameMgt/SendGame", ReplyAction="http://tempuri.org/IGameMgt/SendGameResponse")]
        System.Threading.Tasks.Task<bool> SendGameAsync(AdivinaQue.Client.Proxy.GameCurrently gameCurrently);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameMgtCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/RecieveMessage")]
        void RecieveMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/RecieveUsers")]
        void RecieveUsers(System.Collections.Generic.Dictionary<string, object> users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/RecievePlayer")]
        void RecievePlayer(AdivinaQue.Client.Proxy.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameMgt/SendInvitationGame", ReplyAction="http://tempuri.org/IGameMgt/SendInvitationGameResponse")]
        bool SendInvitationGame(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/SendBoardConfigurate")]
        void SendBoardConfigurate(string username, int size, string category);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveRival")]
        void ReceiveRival(string rival);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/RecieveScores")]
        void RecieveScores(System.Collections.Generic.Dictionary<string, int> globalScores);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveCardSeed")]
        void ReceiveCardSeed(int[] randomImageList, int[] randomPositionList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveCorrectPair")]
        void ReceiveCorrectPair(System.Collections.Generic.Dictionary<System.Windows.Media.Imaging.BitmapImage, string> cards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveCardTurn")]
        void ReceiveCardTurn(System.Windows.Media.Imaging.BitmapImage image, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveScoreRival")]
        void ReceiveScoreRival(int score);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveNextTurn")]
        void ReceiveNextTurn(bool nextTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveNumberCardsFinded")]
        void ReceiveNumberCardsFinded(int numberCardsFinded);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveWinner")]
        void ReceiveWinner(string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameMgt/ReceiveUsersPlayed")]
        void ReceiveUsersPlayed(string[] usersPlayed);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameMgtChannel : AdivinaQue.Client.Proxy.IGameMgt, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameMgtClient : System.ServiceModel.DuplexClientBase<AdivinaQue.Client.Proxy.IGameMgt>, AdivinaQue.Client.Proxy.IGameMgt {
        
        public GameMgtClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameMgtClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameMgtClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameMgtClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameMgtClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendBoard(string toUsername, int size, string category) {
            base.Channel.SendBoard(toUsername, size, category);
        }
        
        public System.Threading.Tasks.Task SendBoardAsync(string toUsername, int size, string category) {
            return base.Channel.SendBoardAsync(toUsername, size, category);
        }
        
        public void SendRival(string rival, string fromUsername) {
            base.Channel.SendRival(rival, fromUsername);
        }
        
        public System.Threading.Tasks.Task SendRivalAsync(string rival, string fromUsername) {
            return base.Channel.SendRivalAsync(rival, fromUsername);
        }
        
        public void SendBoardLists(string toUsername, int[] randomImageList, int[] randomPositionList) {
            base.Channel.SendBoardLists(toUsername, randomImageList, randomPositionList);
        }
        
        public System.Threading.Tasks.Task SendBoardListsAsync(string toUsername, int[] randomImageList, int[] randomPositionList) {
            return base.Channel.SendBoardListsAsync(toUsername, randomImageList, randomPositionList);
        }
        
        public void SendCorrectCards(string toUsername, System.Collections.Generic.Dictionary<System.Windows.Media.Imaging.BitmapImage, string> cards) {
            base.Channel.SendCorrectCards(toUsername, cards);
        }
        
        public System.Threading.Tasks.Task SendCorrectCardsAsync(string toUsername, System.Collections.Generic.Dictionary<System.Windows.Media.Imaging.BitmapImage, string> cards) {
            return base.Channel.SendCorrectCardsAsync(toUsername, cards);
        }
        
        public void SendCardTurn(string toUsername, System.Windows.Media.Imaging.BitmapImage image, string name) {
            base.Channel.SendCardTurn(toUsername, image, name);
        }
        
        public System.Threading.Tasks.Task SendCardTurnAsync(string toUsername, System.Windows.Media.Imaging.BitmapImage image, string name) {
            return base.Channel.SendCardTurnAsync(toUsername, image, name);
        }
        
        public void SendScoreRival(string toUsername, int score) {
            base.Channel.SendScoreRival(toUsername, score);
        }
        
        public System.Threading.Tasks.Task SendScoreRivalAsync(string toUsername, int score) {
            return base.Channel.SendScoreRivalAsync(toUsername, score);
        }
        
        public void SendNextTurnRival(string toUsername, bool nextTurn) {
            base.Channel.SendNextTurnRival(toUsername, nextTurn);
        }
        
        public System.Threading.Tasks.Task SendNextTurnRivalAsync(string toUsername, bool nextTurn) {
            return base.Channel.SendNextTurnRivalAsync(toUsername, nextTurn);
        }
        
        public void SendNumberCardsFinded(string toUsername, int numberCardsFinded) {
            base.Channel.SendNumberCardsFinded(toUsername, numberCardsFinded);
        }
        
        public System.Threading.Tasks.Task SendNumberCardsFindedAsync(string toUsername, int numberCardsFinded) {
            return base.Channel.SendNumberCardsFindedAsync(toUsername, numberCardsFinded);
        }
        
        public void SendWinner(string toUsername, string winner) {
            base.Channel.SendWinner(toUsername, winner);
        }
        
        public System.Threading.Tasks.Task SendWinnerAsync(string toUsername, string winner) {
            return base.Channel.SendWinnerAsync(toUsername, winner);
        }
        
        public void DisconnectPlayers(string username, string rival) {
            base.Channel.DisconnectPlayers(username, rival);
        }
        
        public System.Threading.Tasks.Task DisconnectPlayersAsync(string username, string rival) {
            return base.Channel.DisconnectPlayersAsync(username, rival);
        }
        
        public bool SendGame(AdivinaQue.Client.Proxy.GameCurrently gameCurrently) {
            return base.Channel.SendGame(gameCurrently);
        }
        
        public System.Threading.Tasks.Task<bool> SendGameAsync(AdivinaQue.Client.Proxy.GameCurrently gameCurrently) {
            return base.Channel.SendGameAsync(gameCurrently);
        }
    }
}
